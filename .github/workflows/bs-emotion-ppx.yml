name: build and release bs-emotion

on:  
  push:
    tags:
      - v*
    branches: 
      - master
        
  pull_request:
    branches:
      - master    

jobs:
  test_and_build:
    name: Test and build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install esy
        run: npm -g install esy@0.5.8
        
      - name: Get esy store path
        id: esy_cache_path
        shell: bash
        run: |
          # COMPUTE THE ESY INSTALL CACHE LOCATION AHEAD OF TIME
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            THE_ESY__CACHE_INSTALL_PATH=$HOME/.esy/3_/i
            THE_ESY__CACHE_INSTALL_PATH=$( cygpath --mixed --absolute "$THE_ESY__CACHE_INSTALL_PATH")
          else
            DESIRED_LEN="86"
            HOME_ESY3="$HOME/.esy/3"
            HOME_ESY3_LEN=${#HOME_ESY3}
            NUM_UNDERS=$(echo "$(($DESIRED_LEN-$HOME_ESY3_LEN))")
            UNDERS=$(printf "%-${NUM_UNDERS}s" "_")
            UNDERS="${UNDERS// /_}"
            THE_ESY__CACHE_INSTALL_PATH=${HOME_ESY3}${UNDERS}/i  
          fi
          echo "THE_ESY__CACHE_INSTALL_PATH: $THE_ESY__CACHE_INSTALL_PATH"
          echo "##[set-output name=path;]$THE_ESY__CACHE_INSTALL_PATH"
          
      - name: Restore esy cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.esy_cache_path.outputs.path }}
          key: v1-esy-${{ matrix.os }}-${{ hashFiles('**/index.json') }}
          restore-keys: |
            v1-esy-${{ matrix.os }}-
      
      - name: esy install and build
        working-directory: bs-emotion-ppx
        run: |                    
          esy install 
          esy build          
          
      - name: bs-emotion-ppx test
        working-directory: bs-emotion-ppx/test
        run: |                    
          esy install
          esy build 

      - name: bs-emotion-ppx release
        working-directory: bs-emotion-ppx
        run: |                    
          esy release            
                           
      - name: Retrieve bs-emotion-ppx binary path
        id: bs-emotion-ppx-path
        working-directory: bs-emotion-ppx
        shell: bash
        run: |                    
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            BS_EMOTION_PPX_PATH=$( echo "$(esy x which bs-emotion-ppx)") 
            BS_EMOTION_PPX_PATH=$( cygpath --mixed --absolute "$BS_EMOTION_PPX_PATH")           
          else
            BS_EMOTION_PPX_PATH=$(echo "$(esy x which bs-emotion-ppx)")
          fi
          mkdir upload 
          cp $BS_EMOTION_PPX_PATH upload/
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            mv _release/package.json upload/package.json
            mv _release/README.md upload/README.md
          fi
          UPLOAD_PATH=$(realpath upload)          
          echo "UPLOAD_PATH: $UPLOAD_PATH"          
          echo "##[set-output name=path;]$UPLOAD_PATH"          
      
      - name: Upload artifacts ${{ matrix.os }}        
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: ${{ steps.bs-emotion-ppx-path.outputs.path }}

  publish:
    needs: test_and_build
    if: github.event_name != 'pull_request'
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "12.x"
          registry-url: "https://registry.npmjs.org"

      - name: Create release artifacts
        working-directory: bs-emotion-ppx
        run: |
          esy install
          esy build
          esy release

      - name: Download linux artifacts
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        uses: actions/download-artifact@master
        with:
          name: ubuntu-latest
          path: release/linux

      - name: Download macOS artifacts
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        uses: actions/download-artifact@master
        with:
          name: macOS-latest
          path: release/darwin

      - name: Download windows artifacts
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        uses: actions/download-artifact@master
        with:
          name: windows-latest
          path: release/windows

      - name: Move artifacts
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        run: |          
          mkdir -p release/bin
          mv release/darwin/bs-emotion-ppx release/bin/bs-emotion-ppx-darwin-x64.exe
          mv release/windows/bs-emotion-ppx.exe release/bin/bs-emotion-ppx-win-x64.exe
          mv release/linux/bs-emotion-ppx release/bin/bs-emotion-ppx-linux-x64.exe
          mv release/linux/package.json release/package.json
          mv release/linux/README.md release/README.md

      - name: Publish
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && success()
        working-directory: bs-emotion-ppx/release
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
